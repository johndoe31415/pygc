#!/usr/bin/python3
#
#
import os
import json
import subprocess
import collections
import shutil
from XMLParser import XMLParser

outdir = "render"
infile_svg = "pygc.svg"
#output_width = 1920	# 1080p
output_width = 1280		# 720p
try:
	shutil.rmtree(outdir)
except FileNotFoundError:
	pass
try:
	os.mkdir(outdir)
except FileExistsError:
	pass

xml = XMLParser().parsefile(infile_svg)
layer_names = { }
for layer_node in xml.search("g", **{ "inkscape:groupmode": "layer" }):
	layer_id = layer_node["id"]
	layer_name = layer_node["inkscape:label"]
	layer_names[layer_id] = layer_name

SVGObject = collections.namedtuple("SVGObject", [ "oid", "x", "y", "width", "height" ])
stdout = subprocess.check_output([ "inkscape", "--query-all", infile_svg ], stderr = subprocess.DEVNULL)
svg_objects = [ ]
for line in stdout.decode("ascii").rstrip("\r\n").split("\n"):
	line = line.split(",")
	(oid, x, y, width, height) = line
	x = float(x)
	y = float(y)
	width = float(width)
	height = float(height)
	svgobj = SVGObject(oid = oid, x = x, y = y, width = width, height = height)
	svg_objects.append(svgobj)

svg_objdict = { obj.oid: obj for obj in svg_objects }

Layer = collections.namedtuple("Layer", [ "order", "name", "svgobj", "clip", "cor" ])

def parse_layers(layers, layer_objects, only_clip = False, layer_cors = { }):
	for svg_object in layer_objects:
		layer_name = layer_names.get(svg_object.oid)
		if (layer_name is not None) and (layer_name.startswith("_") == only_clip):
			layer = Layer(order = len(layers), name = layer_name, svgobj = svg_object, clip = layers.get("_clip-" + layer_name), cor = layer_cors.get(layer_name))
			layers[layer_name] = layer

def find_centerpoints_in_layer(layer_node):
	result = { }
	for circlenode in layer_node.circle:
		svgobj = svg_objdict[circlenode["id"]]
		corx = svgobj.x + svgobj.width / 2
		cory = svgobj.y + svgobj.height / 2
		name = circlenode.title.getcdata()
		if name in result:
			raise Exception("Duplicate centerpoint/point of interest entry: %s" % (name))
		result[name] = (corx, cory)
	return result

layer_cors = find_centerpoints_in_layer(xml.searchunique("g", **{ "inkscape:label": "_center_of_rotation"}))
pois = find_centerpoints_in_layer(xml.searchunique("g", **{ "inkscape:label": "_point_of_interest"}))

layers = { }
# Run the same process twice to resolve all clipping areas
layer_objects = [ obj for obj in svg_objects if obj.oid in layer_names ]
parse_layers(layers, layer_objects, only_clip = True)
parse_layers(layers, layer_objects, layer_cors = layer_cors)
print("%d clipped layers found." % (len(list(layer.name for layer in layers.values() if layer.clip is not None))))

for layer in layers.values():
	if layer.name.startswith("_"):
		if layer.name in [ "_page", "_no-render", "_center_of_rotation", "_point_of_interest" ]:
			continue
		elif layer.name.startswith("_clip-"):
			drawlayer = layer.name[6:]
			if drawlayer not in layers:
				raise Exception("Clipping layer %s present, but drawing layer %s not found." % (layer.name, drawlayer))
			if layers[drawlayer].clip is None:
				raise Exception("Clipping layer %s present, but missing in object of %s not found." % (layer.name, drawlayer))
		else:
			raise Exception("Unexpected private layer name: %s" % (layer.name))

page_layer = layers["_page"]
dpi = output_width / page_layer.svgobj.width * 96
tpc = dpi / 96		# to-pixel-coefficient
layer_info = [ ]
for layer in sorted(layers.values(), key = lambda layer: layer.order):
	if layer.name.startswith("_"):
		continue
	next_layer_info = {
		"name": layer.name,
		"dimensions":	[ layer.svgobj.width * tpc, layer.svgobj.height * tpc ],
		"offset":		[ layer.svgobj.x * tpc, layer.svgobj.y * tpc ],
	}
	if layer.clip is not None:
		next_layer_info["clip"] = {
			"dimensions":	[ layer.clip.svgobj.width * tpc, layer.clip.svgobj.height * tpc ],
			"offset":		[ layer.clip.svgobj.x * tpc, layer.clip.svgobj.y * tpc ],
		}
	if layer.cor is not None:
		next_layer_info["cor"] = [ layer.cor[0] * tpc, layer.cor[1] * tpc ]
	layer_info.append(next_layer_info)
	print(next_layer_info)
	subprocess.check_call(["inkscape", "-i", layer.svgobj.oid, "-j", infile_svg, "--export-dpi=%f" % (dpi), "--export-png=%s/%s.png" % (outdir, layer.name) ], stderr = subprocess.DEVNULL)
	print("~" * 120)

all_info = {
	"layers":	layer_info,
	"pois":		{ name : [ poi[0] * tpc, poi[1] * tpc ] for (name, poi) in pois.items() },
}
with open(outdir + "/layers.json", "w") as f:
	print(json.dumps(all_info), file = f)
